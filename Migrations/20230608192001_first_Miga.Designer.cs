// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Project.Storage;

#nullable disable

namespace Project.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20230608192001_first_Miga")]
    partial class first_Miga
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Project.Storage.Entity.Authorization", b =>
                {
                    b.Property<int>("Auth_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Auth_Id"), 1L, 1);

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Auth_Id");

                    b.ToTable("Authorization");
                });

            modelBuilder.Entity("Project.Storage.Entity.Composition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Comp_Count")
                        .HasColumnType("int");

                    b.Property<string>("Comp_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Composition");
                });

            modelBuilder.Entity("Project.Storage.Entity.Malling", b =>
                {
                    b.Property<int>("email")
                        .HasColumnType("int");

                    b.Property<int>("Malling_Id")
                        .HasColumnType("int");

                    b.Property<string>("email_User")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("email");

                    b.ToTable("Malling");
                });

            modelBuilder.Entity("Project.Storage.Entity.Payment", b =>
                {
                    b.Property<int>("Payment_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Payment_Id"), 1L, 1);

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Delivery_Time")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Payment_info")
                        .HasColumnType("int");

                    b.Property<string>("Post_Card")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Product_Id")
                        .HasColumnType("int");

                    b.Property<string>("Products_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sum_Cost")
                        .HasColumnType("int");

                    b.Property<int>("User_id")
                        .HasColumnType("int");

                    b.Property<bool>("With_Post_Card")
                        .HasColumnType("bit");

                    b.HasKey("Payment_Id");

                    b.HasIndex("Product_Id");

                    b.HasIndex("User_id")
                        .IsUnique();

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("Project.Storage.Entity.Product", b =>
                {
                    b.Property<int>("Product_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Product_Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("Shop_Id")
                        .HasColumnType("int");

                    b.Property<int>("Shop_Id1")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Product_Id");

                    b.HasIndex("Shop_Id1");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("Project.Storage.Entity.Product_Rating", b =>
                {
                    b.Property<int>("Product_Id")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Prod_Rat_Id")
                        .HasColumnType("int");

                    b.Property<float>("Rate")
                        .HasColumnType("real");

                    b.HasKey("Product_Id");

                    b.ToTable("Product_Rating");
                });

            modelBuilder.Entity("Project.Storage.Entity.Shop", b =>
                {
                    b.Property<int>("Shop_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Shop_Id"), 1L, 1);

                    b.Property<string>("Shop_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Shop_Id");

                    b.ToTable("Shop");
                });

            modelBuilder.Entity("Project.Storage.Entity.Shop_Rating", b =>
                {
                    b.Property<int>("Shop_Id")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Rate")
                        .HasColumnType("real");

                    b.Property<int>("Shop_Rat_Id")
                        .HasColumnType("int");

                    b.HasKey("Shop_Id");

                    b.ToTable("Shop_Rating");
                });

            modelBuilder.Entity("Project.Storage.Entity.Users", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Auth_Id")
                        .HasColumnType("int");

                    b.Property<int>("AuthorizationAuth_Id")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("AuthorizationAuth_Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Project.Storage.Entity.Composition", b =>
                {
                    b.HasOne("Project.Storage.Entity.Product", "Product")
                        .WithMany("Composition")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Project.Storage.Entity.Malling", b =>
                {
                    b.HasOne("Project.Storage.Entity.Users", "User")
                        .WithOne("Malling")
                        .HasForeignKey("Project.Storage.Entity.Malling", "email")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Project.Storage.Entity.Payment", b =>
                {
                    b.HasOne("Project.Storage.Entity.Product", "Product")
                        .WithMany()
                        .HasForeignKey("Product_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.Storage.Entity.Users", "Users")
                        .WithOne("UserPayment")
                        .HasForeignKey("Project.Storage.Entity.Payment", "User_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Project.Storage.Entity.Product", b =>
                {
                    b.HasOne("Project.Storage.Entity.Shop", "Shop")
                        .WithMany("Products")
                        .HasForeignKey("Shop_Id1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("Project.Storage.Entity.Product_Rating", b =>
                {
                    b.HasOne("Project.Storage.Entity.Product", "Product")
                        .WithOne("Product_Ratings")
                        .HasForeignKey("Project.Storage.Entity.Product_Rating", "Product_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Project.Storage.Entity.Shop_Rating", b =>
                {
                    b.HasOne("Project.Storage.Entity.Shop", "Shop")
                        .WithOne("Shop_Rating")
                        .HasForeignKey("Project.Storage.Entity.Shop_Rating", "Shop_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("Project.Storage.Entity.Users", b =>
                {
                    b.HasOne("Project.Storage.Entity.Authorization", "Authorization")
                        .WithMany("Users")
                        .HasForeignKey("AuthorizationAuth_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Authorization");
                });

            modelBuilder.Entity("Project.Storage.Entity.Authorization", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Project.Storage.Entity.Product", b =>
                {
                    b.Navigation("Composition");

                    b.Navigation("Product_Ratings")
                        .IsRequired();
                });

            modelBuilder.Entity("Project.Storage.Entity.Shop", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("Shop_Rating")
                        .IsRequired();
                });

            modelBuilder.Entity("Project.Storage.Entity.Users", b =>
                {
                    b.Navigation("Malling")
                        .IsRequired();

                    b.Navigation("UserPayment")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
